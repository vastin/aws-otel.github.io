{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/docs/getting-started/java-sdk/metric-manual-instr","result":{"data":{"mdx":{"id":"0a822580-758c-517f-b8cd-a15a071576f4","excerpt":"OpenTelemetry provides different language SDKs to instrument code for collecting metrics data in the application.\nIn this tutorial, we will introduce how to useâ€¦","fields":{"slug":"/docs/getting-started/java-sdk/metric-manual-instr/"},"frontmatter":{"title":"Getting Started with the Java SDK on Metrics Instrumentation","description":"OpenTelemetry provides different language SDKs to instrument code for collecting metrics data in the application. In this doc, we will introduce how to use OpenTelemetry Java SDK for metric instrumentation in the application... The metrics auto instrumentation has not been supported in AOT/OpenTelemetry yet. We have to manually instrument code in the application to generate application metrics. Here is an example with steps for applications to create metrics...","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Started with the Java SDK on Metrics Instrumentation\",\n  \"description\": \"OpenTelemetry provides different language SDKs to instrument code for collecting metrics data in the application. In this doc, we will introduce how to use OpenTelemetry Java SDK for metric instrumentation in the application... The metrics auto instrumentation has not been supported in AOT/OpenTelemetry yet. We have to manually instrument code in the application to generate application metrics. Here is an example with steps for applications to create metrics...\",\n  \"path\": \"/docs/getting-started/java-sdk/metrics-manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"OpenTelemetry provides different language SDKs to instrument code for collecting metrics data in the application.\\nIn this tutorial, we will introduce how to use OpenTelemetry Java SDK for metric instrumentation in the application.\"), mdx(\"img\", {\n    src: img1,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Requirements\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://adoptopenjdk.net/\"\n  }), \"Java 8 (or later)\"), \" is required to run an application using OpenTelemetry.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java\"\n  }), \"OpenTelemetry Java SDK\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-test-framework/blob/terraform/sample-apps/java-sdk-emitter/src/main/java/com/amazon/aocagent/MetricEmitter.java\"\n  }), \"AWS Distro for OpenTelemetry with application metrics sample application\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"metrics-instrumentation-in-application-java\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#metrics-instrumentation-in-application-java\",\n    \"aria-label\": \"metrics instrumentation in application java permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Metrics Instrumentation in Application (Java)\"), mdx(\"p\", null, \"Metrics auto instrument has not been supported in AOT/OpenTelemetry yet. We have to manually instrumenting code in the application to generate application metrics.\\nHere is an example with steps for modifying application code to create metrics.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add the following OpenTelemetry SDK dependencies in the application.\")), mdx(\"p\", null, \"With Gradle\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"implementation(\\\"io.opentelemetry:opentelemetry-sdk:0.10.0\\\")\\nimplementation(\\\"io.opentelemetry:opentelemetry-exporter-otlp:0.10.0\\\")\\n\")), mdx(\"p\", null, \"With Maven\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<!-- https://mvnrepository.com/artifact/io.opentelemetry/opentelemetry-sdk-metrics -->\\n<dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-sdk</artifactId>\\n    <version>0.10.0</version>\\n</dependency>\\n<dependency>\\n    <groupId>io.opentelemetry</groupId>\\n    <artifactId>opentelemetry-exporters-otlp</artifactId>\\n    <version>0.10.0</version>\\n</dependency>\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"OtlpGrpcMetricExporter\"), \" to send application metrics data to AWS OTel Collector.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"        MetricExporter metricExporter =\\n          OtlpGrpcMetricExporter.builder()\\n            .setChannel(ManagedChannelBuilder.forTarget(otlpEndpoint).usePlaintext().build())\\n            .build();\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"IntervalMetricReader\"), \" that will batch metrics for every 10 seconds before sending\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"IntervalMetricReader intervalMetricReader =\\n                IntervalMetricReader.builder()\\n                        .setMetricProducers(\\n                                Collections.singleton(OpenTelemetrySdk.getGlobalMeterProvider().getMetricProducer()))\\n                        .setExportIntervalMillis(10000)// configurable interval\\n                        .setMetricExporter(metricExporter)\\n                        .build();\\n\\nMeter meter = OpenTelemetry.getGlobalMeter(\\\"aws-otel-java-sample\\\", \\\"v0.1.0\\\");\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create Metrics instruments by using OpenTelemetry API\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"// creating a Counter metric to count total API payload bytes sent\\nLongCounter apiBytesSentCounter = meter\\n        .longCounterBuilder(\\\"apiBytesSent\\\")\\n        .setDescription(\\\"API request payload sent in bytes\\\")\\n        .setUnit(\\\"one\\\")\\n        .build();\\n// creating a ValueRecorder metrics to record API latency in timeseries\\nLongValueRecorder apiLatencyRecorder = meter\\n        .longValueRecorderBuilder(\\\"latency\\\")\\n        .setDescription(\\\"API latency time\\\")\\n        .setUnit(\\\"ms\\\")\\n        .build();\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Record Metric measurements and wait for IntervalMetricReader to send the batched Metrics to AWS OTel Collector.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"apiLatencyRecorder.record(\\\"120\\\",\\n    Labels.of(\\\"apiName\\\", apiName, \\\"statusCode\\\", statusCode));\\napiBytesSentCounter.add(\\\"2048\\\",\\n    Labels.of(\\\"apiName\\\", apiName, \\\"statusCode\\\", statusCode));\\n\")), mdx(\"p\", null, \"These steps provided the sample code for applications to create application metrics.\"), mdx(\"p\", null, \"Please follow \", mdx(Link, {\n    to: \"/docs/getting-started/cloudwatch-metrics\",\n    mdxType: \"Link\"\n  }, \"Getting Started Sending CloudWatch Metrics with AWS OpenTelemetry\"), \"\\nto setup AWS OTel Collector for sending metrics to CloudWatch. Once AWS OTel Collector is installed to collect the metrics data.\\nYou should see the following metrics present on your CloudWatch Console.\"), mdx(\"img\", {\n    src: img2,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"Please stay tuned to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability\"\n  }), \"AWS Observability Repo\"), \" for more updates.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Requirements"},{"depth":2,"value":"Metrics Instrumentation in Application (Java)"}]}},"pageContext":{"slug":"/docs/getting-started/java-sdk/metric-manual-instr/","githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/getting-started/java-sdk/metric-manual-instr.mdx"}},"staticQueryHashes":["2501019404","973074209"]}