{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/docs/getting-started/go-sdk","result":{"data":{"mdx":{"id":"f1dacce6-2b37-55eb-b2c0-ec5ac9af960a","excerpt":"Welcome to the AWS Distro for OpenTelemetry Go (ADOT Go) getting started guide. This walkthrough covers the ADOT Go components, how to \nconfigure the ADOTâ€¦","fields":{"slug":"/docs/getting-started/go-sdk/"},"frontmatter":{"title":"Tracing with the AWS Distro for OpenTelemetry Go SDK","description":"Welcome to the AWS Distro for OpenTelemetry Go (ADOT Go) getting started guide. This walkthrough covers the ADOT Go components, how to configure the ADOT components for traces with OpenTelemetry Go and AWS X-Ray, as well as how to use the AWS Elastic Container Service (AWS ECS) and AWS Elastic Kubernetes Service (AWS EKS) resource detectors.","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tracing with the AWS Distro for OpenTelemetry Go SDK\",\n  \"description\": \"Welcome to the AWS Distro for OpenTelemetry Go (ADOT Go) getting started guide. This walkthrough covers the ADOT Go components, how to configure the ADOT components for traces with OpenTelemetry Go and AWS X-Ray, as well as how to use the AWS Elastic Container Service (AWS ECS) and AWS Elastic Kubernetes Service (AWS EKS) resource detectors.\",\n  \"path\": \"/docs/getting-started/go-sdk\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Welcome to the AWS Distro for OpenTelemetry Go (ADOT Go) getting started guide. This walkthrough covers the ADOT Go components, how to\\nconfigure the ADOT components for traces with OpenTelemetry Go and AWS X-Ray, as well as how to use the AWS Elastic Container Service\\n(AWS ECS) and AWS Elastic Kubernetes Service (AWS EKS) resource detectors. Before reading this guide, you should familiarize with\\ndistributed tracing and the basics of OpenTelemetry. To learn more about getting started with OpenTelemetry Go, see the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://opentelemetry.io/docs/go/\"\n  }), \"OpenTelemetry developer documentation\"), \".\"), mdx(\"img\", {\n    src: goImg1,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"installation-and-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#installation-and-configuration\",\n    \"aria-label\": \"installation and configuration permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Installation and Configuration\"), mdx(\"p\", null, \"To get started with ADOT Go, create a new directory for your project and add a new file inside called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \". Open up your command line\\ninterface (CLI) and run the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"go mod init main\"), \" in the same directory, which will create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"go.mod\"), \" file. This file is used by Go to manage imports. \"), mdx(\"p\", null, \"To install the necessary prerequisites, run the following command in the same directory that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"go.mod\"), \" file is in:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"go get go.opentelemetry.io/otel \\ngo get go.opentelemetry.io/otel/sdk \\ngo get go.opentelemetry.io/otel/exporters/otlp \\ngo get go.opentelemetry.io/contrib/propagators/aws/xray\\n\")), mdx(\"p\", null, \"In your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file, add the following imports:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"package main\\n\\nimport (\\n    \\\"context\\\"\\n    \\n    \\\"go.opentelemetry.io/otel\\\"\\n    \\\"go.opentelemetry.io/otel/api/global\\\"\\n    \\\"go.opentelemetry.io/otel/api/trace\\\"\\n    \\\"go.opentelemetry.io/otel/exporters/otlp\\\"\\n    \\\"go.opentelemetry.io/contrib/propagators/aws/xray\\\"\\n    sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n)\\n\")), mdx(\"p\", null, \"The packages above contain only the basic requirements for using OpenTelemetry Go with AWS X-Ray. The specific libraries and packages that\\nare used will vary greatly depending on the type of application and what features you need. Check out the full list of\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-go-contrib/tree/master/instrumentation#instrumentation\"\n  }), \"libraries\"), \" that contains\\ninstrumentation for 3rd-party Go packages and some packages from the standard library.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"creating-an-opentelemetry-protocol-otlp-exporter\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#creating-an-opentelemetry-protocol-otlp-exporter\",\n    \"aria-label\": \"creating an opentelemetry protocol otlp exporter permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creating an OpenTelemetry Protocol (OTLP) Exporter\"), mdx(\"img\", {\n    src: goImg2,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"OpenTelemetry Go requires an exporter to send traces to a backend. Exporters allow telemetry data to be transferred either to the AWS\\nDistro for OpenTelemetry Collector (ADOT Collector), or to a remote system or console for further analysis. \"), mdx(\"p\", null, \"The ADOT Collector is a separate process that is designed to be a \\u2018sink\\u2019 for telemetry data emitted by many processes, which can then export\\nthat data to back-end systems. The base components vendor-agnostic implementation on how to receive, process and export telemetry data. \"), mdx(\"p\", null, \"To initialize the OTLP exporter, add the following code to the file the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file -\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"creds, err := credentials.NewClientTLSFromFile(\\\"my-cert.pem\\\", \\\"\\\")\\nif err != nil {\\n    // Handle error here...\\n}\\n\\n// Create new OTLP Exporter\\nexporter, err := otlp.NewExporter(\\n    otlp.WithTLSCredentials(creds), \\n    otlp.WithAddress(<INSERT LISTEN ADDRESS HERE>),\\n)\\n    \\nif err != nil {\\n    // Handle error here...\\n}\\n\")), mdx(\"p\", null, \"This creates a new OTLP exporter with a few options - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WithTLSCredentials()\"), \" is a way to intialize gRPC TransportCredentials and you can learn more about it\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pkg.go.dev/google.golang.org/grpc/credentials#TransportCredentials\"\n  }), \"here\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WithAddress()\"), \" allows you to set the address\\nthat the exporter will connect to the Collector on. If the address is unset, it will instead try to use connect to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DefaultCollectorHost:DefaultCollectorPort\"), \".\"), mdx(\"p\", null, \"If the Collector you are connecting to does not use TLS, for example in a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/getting-started/collector/sidecar-vs-service\"\n  }), \"sidecar deployment\"), \",\\nthen pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlp.WithInsecure()\"), \" instead to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlp.NewExporter\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"creating-a-tracer-provider\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#creating-a-tracer-provider\",\n    \"aria-label\": \"creating a tracer provider permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creating a Tracer Provider\"), mdx(\"p\", null, \"Tracing refers to the practice used by engineers and developers to analyze application code. Traditionally, this was done through using various\\ndifferent debugging tools and programming techniques. As applications evolved and adopted the microservices architecture, tracing now refers\\nto distributed tracing. This term refers to tracing a path that a request takes as it goes through different services and processes in a\\nmulti-service architecture design. To define a trace more precisely in OpenTelemetry terms, it is essentially a group of linked spans, which\\nrepresent a unit of work in a request. The spans can have information attached such as a name and other data describing the timed operation.\\nEvery trace consists of at least a root span and can have zero or more child spans. The root span describes the end-to-end latency of the entire\\ntrace, while child spans representing sub-operations. \"), mdx(\"img\", {\n    src: goImg3,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"In order to generate traces, OpenTelemetry Go requires a trace provider to be created. A Trace provider can have multiple different span processors,\\nwhich are components that give the ability to modify and export span data after it has been created. \"), mdx(\"p\", null, \"To create a new trace provider, add the following lines to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"cfg := sdktrace.Config{\\n    DefaultSampler: sdktrace.AlwaysSample(),\\n}\\n   \\nidg := xray.NewIDGenerator()\\n\\ntp := sdktrace.NewTracerProvider(\\n    sdktrace.WithConfig(cfg),\\n    sdktrace.WithSyncer(exporter),\\n    sdktrace.WithIDGenerator(idg),\\n)\\n\")), mdx(\"p\", null, \"The block of code above will create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \" with a Sampler that samples every trace, and an ID Generator that\\nwill generate trace IDs that conform to AWS X-Ray\\u2019s format, as well as register the OLTP exporter we created in the previous section. \"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"setting-global-options\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#setting-global-options\",\n    \"aria-label\": \"setting global options permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Setting Global Options\"), mdx(\"p\", null, \"In this section we will be setting a global tracer provider since its good practice when using OpenTelemetry Go. By doing this, it will make it easier\\nfor other libraries/dependencies that use the OpenTelemetry API to easily discover the SDK and emit telemetry data. \"), mdx(\"p\", null, \"In addition to setting a global tracer provider, we will also configure the context propagation option. Context propagation refers to sharing data across\\nmultiple processes or services. This ability to correlate information across service boundaries is one of the principal concepts behind distributed tracing.\\nTo find these correlations, components in a distributed system need to be able to collect, store, and transfer metadata referred to as context. Propagator\\nstructs are configured inside Tracer structs in order to support transferring of context across process boundaries. A context will often have information\\nidentifying the current span and trace, and can contain arbitrary correlations as key-value pairs. Propagation is when context is bundled and transferred\\nacross services, often via HTTP headers. \"), mdx(\"p\", null, \"To set up global options, we will use the global package and add the following lines to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"global.SetTracerProvider(tp)\\nglobal.SetTextMapPropagator(xray.Propagator{})\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"demo-walkthrough\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#demo-walkthrough\",\n    \"aria-label\": \"demo walkthrough permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Demo Walkthrough\"), mdx(\"p\", null, \"Let\\u2019s take the concepts we\\u2019ve just covered in the previous section and create a demo application. In this application we will be creating a HTTP\\napplication with one endpoint called /hello-world. When a client hits this endpoint, the server will return a simple response containing a string\\nsaying \\u201CHello World\\u201D. The goal of this example application is to show you how to instrument send traces to AWS X-Ray using OpenTelemetry Go. \"), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"setting-up-a-router-using-mux\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#setting-up-a-router-using-mux\",\n    \"aria-label\": \"setting up a router using mux permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Setting up a Router Using Mux\"), mdx(\"p\", null, \"The first thing we need to do is create the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/hello-world\"), \" endpoint. To do this, we will be using a routing package in Go called\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/gorilla/mux\"\n  }), \"Mux\"), \". To install this package, run the following command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"go get -u github.com/gorilla/mux\\n\")), mdx(\"p\", null, \"Now that we have Mux installed, let\\u2019s go ahead and make a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file. In this file, we will first create a new router using Mux. Then, we will\\ndefine the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/hello-world\"), \" endpoint and pass in a function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handler()\"), \", which will return \\u201CHello World\\u201D. Finally, we will call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http.ListenAndServe()\"), \"\\nfunction to start our server and listen on port :8080.\"), mdx(\"p\", null, \"The file should look something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"package main\\n\\nimport (\\n    \\\"encoding/json\\\"\\n    \\\"net/http\\\"\\n    \\\"github.com/gorilla/mux\\\"\\n)\\n\\nfunc main() {\\n\\n    // Create a new HTTP router to handle incoming client requests\\n    r := mux.NewRouter()\\n    \\n    // When client makes GET request to /hello-world\\n    // handler() will execute\\n    r.HandleFunc(\\\"/hello-world\\\", handler).Methods(http.MethodGet)\\n    \\n    // Start the server and listen on localhost:8080\\n    http.ListenAndServe(\\\":8080\\\", r)\\n}\\n\\n// Function for handling the /hello-world endpoint\\nfunc handler(w http.ResponseWriter, r *http.Request) {\\n\\n    // Set the header content-type and return hello world\\n    w.Header().Set(\\\"Content-Type\\\", \\\"text/plain\\\")\\n    json.NewEncoder(w).Encode(\\\"hello world\\\")\\n    \\n}\\n\")), mdx(\"p\", null, \"To start the server we will use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"go run\"), \" command to build and execute our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file. To do this, open up your command line interface and navigate\\nto the directory that contains your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file. Once you\\u2019re in the directory execute the following command to run the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file and start the server on port 8080.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ go run main.go\\n\")), mdx(\"p\", null, \"After starting the server, we can test that it works by opening up the browser and typing in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:8080/hello-world\"), \" , you should now see \\u201CHello World\\u201D printed to the screen! \"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Make sure the \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }), \"aws-otel-collector\"), \" is properly set up and running\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"instrument-our-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#instrument-our-application\",\n    \"aria-label\": \"instrument our application permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Instrument our Application\"), mdx(\"p\", null, \"Now that we have a simple HTTP server set up with one endpoint, it\\u2019s time to instrument our application with OpenTelemetry Go so that we can start tracing requests.\\nTo do this, we will first create a helper function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initTracer()\"), \", where we include all the instrumentation code. In this helper function, we will\\ninstantiate a new OTLP exporter struct. Then, we will create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \" struct and pass in configuration options such as a custom ID Generator,\\nwhich will be used for sending the traces to AWS X-Ray . The last part of this function is specifying the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProvider\"), \" struct that we want to use, as well as the propagator. \"), mdx(\"p\", null, \"The function should look something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"func initTracer() {\\n\\n    // Create new OTLP Exporter struct\\n    driver := otlpgrpc.NewDriver(\\n     otlpgrpc.WithInsecure(),\\n     otlpgrpc.WithEndpoint(\\\"localhost:30080\\\"),\\n     otlpgrpc.WithDialOption(grpc.WithBlock()), // useful for testing\\n    )\\n    \\n    exporter, err := otlp.NewExporter(ctx, driver)\\n    if err != nil {\\n        // Handle error here...\\n    }\\n\\n    // AlwaysSample() returns a Sampler that samples every trace.\\n    // Be careful about using this sampler in a production application with\\n    // significant traffic: a new trace will be started and exported for every request.\\n    cfg := sdktrace.Config{\\n        DefaultSampler: sdktrace.AlwaysSample(),\\n    }\\n    \\n    // A custom ID Generator to generate traceIDs that conform to\\n    // AWS X-Ray traceID format\\n    idg := xray.NewIDGenerator()\\n\\n    // Create a new TraceProvider object passing in the config, the exporter\\n    // and the ID Generator we want to use for our tracing\\n    tp := sdktrace.NewTracerProvider(\\n        sdktrace.WithConfig(cfg),\\n        sdktrace.WithSyncer(exporter),\\n        sdktrace.WithIDGenerator(idg),\\n    )\\n\\n    // Set the traceprovider and the propagator we want to use\\n    otel.SetTracerProvider(tp)\\n    otel.SetTextMapPropagator(xray.Propagator{})\\n}\\n\")), mdx(\"p\", null, \"Please note, if your Collector is using TLS, usually because it is deployed as a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/getting-started/collector/sidecar-vs-service\"\n  }), \"service\"), \",\\nyou will need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlp.WithTLSCredentials\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlp.WithInsecure\"), \".\"), mdx(\"p\", null, \"After creating the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initTracer()\"), \" function, we can now call it in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main()\"), \" function, along with creating a new tracer and giving it a\\nname of \\u201Cdemo-app\\u201D. In addition to initializing a tracer, we also need to add a line to allow the ADOT Collector to act as a middleware in\\norder to intercept requests and send those traces to AWS X-Ray. \"), mdx(\"p\", null, \"The updated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main()\"), \" function should now look something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true highlight={3,4,9}\",\n    \"lineNumbers\": \"true\",\n    \"highlight\": \"{3,4,9}\"\n  }), \"func main() {\\n\\n    initTracer()\\n    tracer := otel.Tracer(\\\"demo-app\\\")\\n    \\n    // Create a new HTTP router to handle incoming client requests\\n    r := mux.NewRouter()\\n    \\n    r.Use(otelmux.Middleware(\\\"my-server\\\"))\\n    \\n    // When client makes GET request to /hello-world, handler() will execute\\n    r.HandleFunc(\\\"/hello-world\\\", handler).Methods(http.MethodGet)\\n    \\n    // Start the server and listen on localhost:8080\\n    http.ListenAndServe(\\\":8080\\\", r)\\n}\\n\")), mdx(\"p\", null, \"Once again, we will start our server by using the following command and then visiting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:8080/hello-world\"), \". \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ go run main.go\\n\")), mdx(\"p\", null, \"Now, along with seeing \\u201CHello World\\u201D printed to the browser, you can also log into your AWS X-Ray Console and see that there is a new trace\\nrequest for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/hello-world\"), \" endpoint. \"), mdx(\"img\", {\n    src: goImg4,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"The completed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" file should now look something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"package main\\n\\nimport (\\n    \\\"encoding/json\\\"\\n    \\\"net/http\\\"\\n\\n    \\\"github.com/gorilla/mux\\\"\\n    \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux\\\"\\n    \\\"go.opentelemetry.io/contrib/propagators/aws/xray\\\"\\n    \\\"go.opentelemetry.io/otel\\\"\\n    \\\"go.opentelemetry.io/otel/exporters/otlp\\\"\\n    \\\"go.opentelemetry.io/otel/exporters/otlp/otlpgrpc\\\"\\n\\n    sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n)\\n\\nvar tracer = otel.Tracer(\\\"demo-app\\\")\\n\\nfunc main() {\\n\\n    initTracer()\\n\\n    // Create a new HTTP router to handle incoming client requests\\n    r := mux.NewRouter()\\n\\n    r.Use(otelmux.Middleware(\\\"my-server\\\"))\\n\\n    // When client makes GET request to /hello-world\\n    // handler() will execute\\n    r.HandleFunc(\\\"/hello-world\\\", handler).Methods(http.MethodGet)\\n\\n    // Start the server and listen on localhost:8080\\n    http.ListenAndServe(\\\":8080\\\", r)\\n\\n}\\n\\n// Function for handling the /hello-world endpoint\\nfunc handler(w http.ResponseWriter, r *http.Request) {\\n\\n    // Set the header content-type and return hello world\\n    w.Header().Set(\\\"Content-Type\\\", \\\"application/json\\\")\\n    json.NewEncoder(w).Encode(\\\"hello world\\\")\\n\\n}\\n\\nfunc initTracer() {\\n\\n    // Create new OTLP Exporter struct\\n     driver := otlpgrpc.NewDriver(\\n        otlpgrpc.WithInsecure(),\\n        otlpgrpc.WithEndpoint(\\\"localhost:30080\\\"),\\n        otlpgrpc.WithDialOption(grpc.WithBlock()), // useful for testing\\n        )\\n    \\n        exporter, err := otlp.NewExporter(ctx, driver)\\n    if err != nil {\\n        // Handle error here...\\n    }\\n\\n    // AlwaysSample() returns a Sampler that samples every trace.\\n    // Be careful about using this sampler in a production application with\\n    // significant traffic: a new trace will be started and exported for every request.\\n    cfg := sdktrace.Config{\\n        DefaultSampler: sdktrace.AlwaysSample(),\\n    }\\n\\n    // A custom ID Generator to generate traceIDs that conform to\\n    // AWS X-Ray traceID format\\n    idg := xray.NewIDGenerator()\\n\\n    // Create a new TraceProvider struct passing in the config, the exporter\\n    // and the ID Generator we want to use for our tracing\\n    tp := sdktrace.NewTracerProvider(\\n        sdktrace.WithConfig(cfg),\\n        sdktrace.WithSyncer(exporter),\\n        sdktrace.WithIDGenerator(idg),\\n    )\\n\\n    // Set the traceprovider and the propagator we want to use\\n    otel.SetTracerProvider(tp)\\n    otel.SetTextMapPropagator(xray.Propagator{})\\n}\\n\")), mdx(\"p\", null, \"Please note, if your Collector is using TLS, usually because it is deployed as a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/getting-started/collector/sidecar-vs-service\"\n  }), \"service\"), \",\\nyou will need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlp.WithTLSCredentials\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otlp.WithInsecure\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"using-the-aws-ecs-resource-detector\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#using-the-aws-ecs-resource-detector\",\n    \"aria-label\": \"using the aws ecs resource detector permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Using the AWS ECS Resource Detector\"), mdx(\"p\", null, \"The AWS ECS Resource Detector is responsible for detecting whether or not a Go application instrumented with OpenTelemetry is running on ECS.\\nIf the resource detector does in fact detect that it is running on ECS, it will populate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource\"), \" with ECS metadata. The metadata will include\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"containerId\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hostName\"), \" which will be formatted as key value pairs inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource\"), \" struct. If the ECS resource detector detects that the application\\nis not running on ECS, then it will return an empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource\"), \" struct.\"), mdx(\"img\", {\n    src: goImg5,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"The following code snippet demonstrates how to use the ECS resource detector.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import (\\n    \\\"context\\\"\\n    \\\"go.opentelemetry.io/contrib/detectors/aws/ecs\\\"\\n    sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n)\\n\\nfunc main() {\\n    \\n    // Instantiate a new ECS Resource detector\\n    ecsResourceDetector := ecs.NewResourceDetector()\\n    resource, err := ecsResourceDetector.Detect(context.Background())\\n\\n    //Associate resource with TracerProvider\\n    tracerProvider := sdktrace.NewTracerProvider(\\n        sdktrace.WithResource(resource),\\n    )\\n    \\n}\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"using-aws-eks-resource-detector\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#using-aws-eks-resource-detector\",\n    \"aria-label\": \"using aws eks resource detector permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Using AWS EKS Resource Detector\"), mdx(\"p\", null, \"The AWS EKS Resource Detector is responsible for detecting whether or not a Go application instrumented with OpenTelemetry is running on EKS. If the\\nEKS resource detector detects that it is running on EKS, it will then populate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource\"), \" struct with metadata. The metadata will include the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"containerId\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clusterName\"), \" which will be formatted as key value pairs. If the EKS resource detector detects that the application is not\\nrunning on EKS, then it will return an empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource\"), \".\"), mdx(\"img\", {\n    src: goImg6,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"The following code snippet demonstrates how to use the EKS Resource detector.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import (\\n    \\\"context\\\"\\n    \\\"go.opentelemetry.io/contrib/detectors/aws/eks\\\"\\n    sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n)\\n\\nfunc main() {\\n    \\n    // Instantiate a new EKS Resource detector\\n    eksResourceDetector := eks.NewResourceDetector()\\n    resource, err := eksResourceDetector.Detect(context.Background())\\n\\n    //Associate resource with TracerProvider\\n    tracerProvider := sdktrace.NewTracerProvider(\\n        sdktrace.WithResource(resource),\\n    )\\n    \\n}\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"conclusion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Conclusion\"), mdx(\"p\", null, \"After reading this guide you should now have a basic understand of how to instrument Go applications with OpenTelemetry and send traces\\nto AWS X-Ray. We also went through how to use the resource detectors to extract information specific to ECS and EKS environments into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resource\"), \" objects.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Installation and Configuration"},{"depth":2,"value":"Creating an OpenTelemetry Protocol (OTLP) Exporter"},{"depth":2,"value":"Creating a Tracer Provider"},{"depth":2,"value":"Setting Global Options"},{"depth":2,"value":"Demo Walkthrough"},{"depth":3,"value":"Setting up a Router Using Mux"},{"depth":3,"value":"Instrument our Application"},{"depth":2,"value":"Using the AWS ECS Resource Detector"},{"depth":2,"value":"Using AWS EKS Resource Detector"},{"depth":2,"value":"Conclusion"}]}},"pageContext":{"slug":"/docs/getting-started/go-sdk/","githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/getting-started/go-sdk.mdx"}},"staticQueryHashes":["2501019404","973074209"]}