{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/docs/getting-started/python-sdk/trace-manual-instr","result":{"data":{"mdx":{"id":"a8be0ada-d0e6-5b7d-b815-5dae18ff834d","excerpt":"AWS Distro for OpenTelemetry (ADOT) Python is a distribution of  OpenTelemetry Python  \nwith components to trace applications in a format compatible with theâ€¦","fields":{"slug":"/docs/getting-started/python-sdk/trace-manual-instr/"},"frontmatter":{"title":"ADOT Python - Manual Instrumentation Documentation","description":"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Python SDK for traces and metrics instrumentation in the application...","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ADOT Python - Manual Instrumentation Documentation\",\n  \"description\": \"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Python SDK for traces and metrics instrumentation in the application...\",\n  \"path\": \"/docs/getting-started/python-sdk/trace-manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"AWS Distro for OpenTelemetry (ADOT) Python is a distribution of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-python\"\n  }), \"OpenTelemetry Python\"), \"\\nwith components to trace applications in a format compatible with the AWS X-Ray service. This enables all the features of the OpenTelemetry\\nproject and configures its components to create traces that can be viewed in the AWS X-Ray console and allow propagation of those contexts\\nacross multiple downstream AWS services.\"), mdx(\"p\", null, \"In this tutorial, we will introduce you to how to use the manual instrumentation package for traces for use with AWS X-Ray.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Requirements\"), mdx(\"p\", null, \"Python 3.5+ is required to use ADOT Python. Check your currently installed python version using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python3 -V\"), \". For more information about supported Python versions, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pypi.org/project/opentelemetry-api/\"\n  }), \"OpenTelemetry API Python package on PyPi\"), \". Make sure you have AWS Distro for OpenTelemetry Collector (ADOT Collector) running. To set up the collector, see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }), \"Getting Started with the AWS Distro for OpenTelemetry Collector\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"getting-the-sdk-and-dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#getting-the-sdk-and-dependencies\",\n    \"aria-label\": \"getting the sdk and dependencies permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Getting the SDK and dependencies\"), mdx(\"p\", null, \"Install the following packages from OpenTelemetry Python using pip.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ pip install opentelemetry-api==0.16b1 \\\\\\n              opentelemetry-sdk==0.16b1 \\\\\\n              opentelemetry-exporter-otlp==0.16b1 \\\\\\n              opentelemetry-sdk-extension-aws==0.16b1\\n\")), mdx(\"p\", null, \"OpenTelemetry Python distributes many packages, which provide instrumentation for well-known Python dependencies. You need to install the relevant\\ninstrumentation package for every dependency you want to generate traces for. To see supported frameworks and libraries, check out\\nthe \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://opentelemetry.io/registry/?s=python\"\n  }), \"OpenTelemetry Registry\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Supported instrumentation packages for the dependencies of the example above\\n$ pip install opentelemetry-instrumentation-flask==0.16b1\\n$ pip install opentelemetry-instrumentation-botocore==0.16b1\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"configure-the-components-and-instrumentors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#configure-the-components-and-instrumentors\",\n    \"aria-label\": \"configure the components and instrumentors permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Configure the components and instrumentors\"), mdx(\"p\", null, \"Add imports for OpenTelemetry packages.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"# Basic packages for your application\\nimport boto3\\nfrom flask import Flask\\nimport json\\n\\n# Add imports for OTel components into the application\\nfrom opentelemetry import trace\\nfrom opentelemetry.exporter.otlp.trace_exporter import OTLPSpanExporter\\nfrom opentelemetry.trace import SpanKind\\nfrom opentelemetry.sdk.trace import TracerProvider\\nfrom opentelemetry.sdk.trace.export import BatchExportSpanProcessor\\n\\n# Import the AWS X-Ray for OTel Python IDs Generator into the application.\\nfrom opentelemetry.sdk.extension.aws.trace import AwsXRayIdsGenerator\\n\")), mdx(\"p\", null, \"Next, configure the Global Tracer Provider to export to the ADOT Collector. The configuration of your SDK exporter depends on how you have configured your ADOT Collector. To learn more about how the ADOT Collector can be configured, refer to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }), \"ADOT Collector Documentation\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"endpoint=\"), \" argument allows you to set the address that the exporter will use to connect to the collector. If the address is unset, it will instead try to connect to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:55680\"), \".\"), mdx(\"p\", null, \"If the Collector the application will connect to is running without TLS configured, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insecure=True\"), \" argument is used to disable client transport security for our OTLP exporter\\u2019s connection. This will use the gRPC \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"insecure_channel()\"), \" method as explained in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://grpc.github.io/grpc/python/grpc.html?highlight=insecure#grpc.insecure_channel\"\n  }), \"gRPC Python Documentation\"), \". This option should never be used in production, non-sidecar deployments.\"), mdx(\"p\", null, \"If the Collector the application will connect to is running with TLS configured, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"credentials=/path/to/cert.pem\"), \" argument is used to give a path to credentials to be used to establish a secure connection for the app\\u2019s exporter. The credentials at this path should be the public certificate of the collector, or one of its root certificates. If no certificate is found, the gRPC method ssl_channel_credentials() will attempt to \\u201Cretrieve the PEM-encoded root certificates from a default location chosen by gRPC runtime\\u201D as explained in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://grpc.github.io/grpc/python/grpc.html?highlight=ssl_channel_credentials\"\n  }), \"gRPC Python Documentation\"), \".\"), mdx(\"h4\", {\n    \"id\": \"example-tracerprovider-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#example-tracerprovider-configuration\",\n    \"aria-label\": \"example tracerprovider configuration permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Example TracerProvider configuration\"), mdx(\"p\", null, \"Connecting to an ADOT Collector running as a sidecar, we can set up the TracerProvider as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"# Sends generated traces in the OTLP format to an ADOT Collector running on port 55678\\notlp_exporter = OTLPSpanExporter(endpoint=\\\"localhost:55678\\\", insecure=True)\\n# Processes traces in batches as opposed to immediately one after the other\\nspan_processor = BatchExportSpanProcessor(otlp_exporter)\\n# Configures the Global Tracer Provider\\ntrace.set_tracer_provider(TracerProvider(active_span_processor=span_processor, ids_generator=AwsXRayIdsGenerator()))\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"instrumenting-packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#instrumenting-packages\",\n    \"aria-label\": \"instrumenting packages permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Instrumenting packages\"), mdx(\"p\", null, \"To enable tracing through your package dependencies, you need to import and initialize the relevant instrumentor classes. Instrumentors have individual\\ninitialization requirements, so refer to the instrumentor\\u2019s package README.md for configuration details.\"), mdx(\"p\", null, \"To enable tracing through your package dependencies, you need to import and initialize the relevant instrumentor classes. Instrumentors have individual\\ninitialization requirements, so refer to the instrumentor\\u2019s package README.md for configuration details.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"from opentelemetry.instrumentation.botocore import BotocoreInstrumentor\\nfrom opentelemetry.instrumentation.flask import FlaskInstrumentor\\n\\n# Initialize instumentor for Botocore\\nBotocoreInstrumentor().instrument()\\n# Initialize instumentor for Flask web framework\\nFlaskInstrumentor().instrument_app(app)\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"setting-the-global-propagators\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#setting-the-global-propagators\",\n    \"aria-label\": \"setting the global propagators permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Setting the global propagators\"), mdx(\"p\", null, \"To allow the span context to propagate downstream when the application makes calls to external services, configure the global propagator.\\nSet the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_PROPAGATORS\"), \" environment variable to use to the AWS X-Ray Propagator.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"OTEL_PROPAGATORS=aws_xray\\n\")), mdx(\"p\", null, \"Alternatively, you can set the global propagator in code. Configure the propagator before your main function, as shown below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"from opentelemetry import propagators\\nfrom opentelemetry.sdk.extension.aws.trace.propagation.aws_xray_format import AwsXRayFormat\\n\\npropagators.set_global_textmap(AwsXRayFormat())\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"adding-custom-tracing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#adding-custom-tracing\",\n    \"aria-label\": \"adding custom tracing permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding custom tracing\"), mdx(\"p\", null, \"You can add additional custom tracing in your application code using the tracer as shown in the following.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"# Get a tracer from the Global Tracer Provider\\ntracer = trace.get_tracer(__name__)\\n\\nif __name__ == \\\"__main__\\\":\\n    \\n    # ... application code\\n    \\n    # start a new span\\n    with tracer.start_as_current_span(\\\"app landing page root span\\\"):\\n        print('Started a root span')\\n        \\n        # start a nested new span\\n        with tracer.start_span(\\\"app landing page child span\\\"):\\n            print('Started a child span')\\n            ec2_client = boto3.client('ec2')\\n            result = ec2_client.describe_instances()\\n            print('EC2 Describe Instances: ', json.dumps(result, default=str, indent=4))\\n            return '<h1>Good job! Traces recorded!</h1>'\\n\")), mdx(\"p\", null, \"For additional resource regarding custom tracing, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://opentelemetry-python.readthedocs.io/en/stable/\"\n  }), \"OpenTelemetry for Python documentation\"), \" or\\ncheck out our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-python/tree/mainline/sample-apps\"\n  }), \"sample applications on Github\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Requirements"},{"depth":2,"value":"Getting the SDK and dependencies"},{"depth":2,"value":"Configure the components and instrumentors"},{"depth":4,"value":"Example TracerProvider configuration"},{"depth":3,"value":"Instrumenting packages"},{"depth":3,"value":"Setting the global propagators"},{"depth":2,"value":"Adding custom tracing"}]}},"pageContext":{"slug":"/docs/getting-started/python-sdk/trace-manual-instr/","githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/getting-started/python-sdk/trace-manual-instr.mdx"}},"staticQueryHashes":["2501019404","973074209"]}