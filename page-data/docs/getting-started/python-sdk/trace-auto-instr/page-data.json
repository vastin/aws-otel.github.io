{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/docs/getting-started/python-sdk/trace-auto-instr","result":{"data":{"mdx":{"id":"a20dcf09-8766-5a4c-8d5f-e513da8af6d6","excerpt":"The AWS Distro for OpenTelemetry Python (ADOT Python) provides functionality to  OpenTelemetry Python  \nfor use with AWS X-Ray. OpenTelemetry Python supportsâ€¦","fields":{"slug":"/docs/getting-started/python-sdk/trace-auto-instr/"},"frontmatter":{"title":"ADOT Python - Auto Instrumentation Documentation","description":"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Python SDK for traces and metrics instrumentation in the application...","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ADOT Python - Auto Instrumentation Documentation\",\n  \"description\": \"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry Python SDK for traces and metrics instrumentation in the application...\",\n  \"path\": \"/docs/getting-started/python-sdk/trace-auto-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The AWS Distro for OpenTelemetry Python (ADOT Python) provides functionality to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-python\"\n  }), \"OpenTelemetry Python\"), \"\\nfor use with AWS X-Ray. OpenTelemetry Python supports automatic instrumentation, which instruments your application to gather telemetry data from a\\ndiverse set of libraries and frameworks with minimal configuration. This data can then be exported to different back-ends in different formats.\"), mdx(\"p\", null, \"In this tutorial, we introduce you to how to use the auto-instrumentation package for traces with AWS X-Ray.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Requirements\"), mdx(\"p\", null, \"Python 3.5+ is required to use OpenTelemetry Python. Check your currently installed Python version using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python3 -V\"), \".\\nFor more information about supported Python versions, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pypi.org/project/opentelemetry-api/\"\n  }), \"OpenTelemetry Python API package on PyPi\"), \".\"), mdx(\"p\", null, \"Make sure you have AWS Distro for OpenTelemetry Collector (ADOT Collector) running. To set up the collector, see\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }), \"Getting Started with the AWS Distro for OpenTelemetry Collector\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"getting-the-sdks-and-dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#getting-the-sdks-and-dependencies\",\n    \"aria-label\": \"getting the sdks and dependencies permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Getting the SDKs and dependencies\"), mdx(\"p\", null, \"The OpenTelemetry instrumentation package automates much of the on-boarding process. See the package usage later in this documentation.\"), mdx(\"h3\", {\n    \"id\": \"install-instrumentation-packages\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#install-instrumentation-packages\",\n    \"aria-label\": \"install instrumentation packages permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Install instrumentation packages\"), mdx(\"p\", null, \"You\\u2019ll need the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-instrumentation\"), \" package from PyPi. This automatically installs the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-api\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-sdk\"), \" packages.\\nIt also provides commands to detect, install, and initialize all instrumentation packages supported for your application\\u2019s dependencies.\"), mdx(\"p\", null, \"Go to the directory of the application, which currently imports these packages, and run the following commands.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ # Install required packages for instumentation and tracing support for AWS X-Ray\\n$ pip install opentelemetry-instrumentation==0.16b1\\n$ pip install opentelemetry-exporter-otlp==0.16b1\\n$ pip install opentelemetry-sdk-extension-aws==0.16b1\\n# Automatically install supported instrumentors for the application's dependencies\\n$ opentelemetry-bootstrap --action=install\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"setting-the-global-propagators\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#setting-the-global-propagators\",\n    \"aria-label\": \"setting the global propagators permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Setting the global propagators\"), mdx(\"p\", null, \"To allow the span context to propagate downstream when the application makes calls to external services, configure the global propagator.\\nSet the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_PROPAGATORS\"), \" environment variable to use the AWS X-Ray Propagator.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"OTEL_PROPAGATORS=aws_xray\\n\")), mdx(\"p\", null, \"Alternatively, you can set the global propagator in code. Configure the propagator before your code starts, as shown below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"from opentelemetry import propagators\\nfrom opentelemetry.sdk.extension.aws.trace.propagation.aws_xray_format import AwsXRayFormat\\n\\npropagators.set_global_textmap(AwsXRayFormat())\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"run-the-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#run-the-application\",\n    \"aria-label\": \"run the application permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Run the application\"), mdx(\"p\", null, \"Auto instrumentation uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opentelemetry-instrument\"), \" wrapper executable to automatically initialize the installed instrumentors and start the provided application. Environment variables are used to configure the connection to the ADOT Collector and command line arguments are used to configure trace generation for AWS X-Ray.\"), mdx(\"p\", null, \"The configuration of your SDK exporter depends on how you have configured your ADOT Collector. To learn more about how the ADOT Collector can be configured, refer to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }), \"ADOT Collector Documentation\"), \".\"), mdx(\"p\", null, \"We can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_EXPORTER_OTLP_ENDPOINT=localhost:55678\"), \" environment variable to set the address that the exporter will use to connect to the collector. If the address is unset, it will instead try to connect to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localhost:55680\"), \".\"), mdx(\"p\", null, \"If the Collector the application will connect to is running without TLS configured, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_EXPORTER_OTLP_INSECURE=True\"), \" environment variable is used to disable client transport security for an SDK OTLP exporter\\u2019s connection. This will use the gRPC insecure_channel() method as explained in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://grpc.github.io/grpc/python/grpc.html?highlight=insecure#grpc.insecure_channel\"\n  }), \"gRPC Python Documentation\"), \". This option should never be used in production, non-sidecar deployments.\"), mdx(\"p\", null, \"If the Collector the application will connect to is running with TLS configured, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_EXPORTER_OTLP_CERTIFICATE=/path/to/my-cert.crt\"), \" environment variable is used to give a path to credentials to be used to establish a secure connection for the app\\u2019s exporter. The credentials at this path should be the public certificate of the collector, or one of its root certificates. If no certificate is found, the gRPC method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssl_channel_credentials()\"), \" will attempt to \\u201Cretrieve the PEM-encoded root certificates from a default location chosen by gRPC runtime\\u201D as explained in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://grpc.github.io/grpc/python/grpc.html?highlight=ssl_channel_credentials\"\n  }), \"gRPC Python Documentation\"), \".\"), mdx(\"h4\", {\n    \"id\": \"examples-on-running-the-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#examples-on-running-the-application\",\n    \"aria-label\": \"examples on running the application permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Examples on running the application\"), mdx(\"p\", null, \"Starting an application which connects to a Collector running as a sidecar without TLS:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ OTEL_EXPORTER_OTLP_INSECURE=True OTEL_EXPORTER_OTLP_ENDPOINT=localhost:55678 opentelemetry-instrument -e otlp --ids-generator aws_xray python ./path/to/your/app.py\\n\")), mdx(\"p\", null, \"Starting an application which connects to a Collector running as a sidecar without TLS using flask:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ OTEL_EXPORTER_OTLP_INSECURE=True OTEL_EXPORTER_OTLP_ENDPOINT=localhost:55678 FLASK_APP=./my_flask_app.py opentelemetry-instrument -e otlp --ids-generator aws_xray flask run\\n\")), mdx(\"p\", null, \"Starting an application which connects to a Collector running as a service with TLS:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ OTEL_EXPORTER_OTLP_CERTIFICATE=/path/to/my-cert.crt OTEL_EXPORTER_OTLP_ENDPOINT=collector.service.local opentelemetry-instrument -e otlp --ids-generator aws_xray python ./path/to/your/app.py\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"p\", null, \"Custom tracing works the same way when using automatic instrumentation or manual instrumentation. For information about trace instrumentation, see\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/getting-started/python-sdk/trace-manual-instr\"\n  }), \"custom tracing manual instrumentation\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Requirements"},{"depth":2,"value":"Getting the SDKs and dependencies"},{"depth":3,"value":"Install instrumentation packages"},{"depth":3,"value":"Setting the global propagators"},{"depth":3,"value":"Run the application"},{"depth":4,"value":"Examples on running the application"}]}},"pageContext":{"slug":"/docs/getting-started/python-sdk/trace-auto-instr/","githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/getting-started/python-sdk/trace-auto-instr.mdx"}},"staticQueryHashes":["2501019404","973074209"]}