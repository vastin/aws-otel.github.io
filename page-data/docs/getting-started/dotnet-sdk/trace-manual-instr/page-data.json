{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/docs/getting-started/dotnet-sdk/trace-manual-instr","result":{"data":{"mdx":{"id":"584e4dc2-b4c4-5776-bc30-d00b60f75da3","excerpt":"In this tutorial, we will introduce how to manually instrument your application step-by-step using AWS Distro for OpenTelemetry .NET SDK. Getting Started Inâ€¦","fields":{"slug":"/docs/getting-started/dotnet-sdk/trace-manual-instr/"},"frontmatter":{"title":"Tracing with the AWS Distro for OpenTelemetry .NET SDK","description":"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry .NET SDK for traces instrumentation in the application.","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tracing with the AWS Distro for OpenTelemetry .NET SDK\",\n  \"description\": \"OpenTelemetry provides different language SDKs to instrument code for collecting telemetry data in the application. In this tutorial, we will introduce how to use OpenTelemetry .NET SDK for traces instrumentation in the application.\",\n  \"path\": \"/docs/getting-started/dotnet-sdk/trace-manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this tutorial, we will introduce how to manually instrument your application step-by-step using AWS Distro for OpenTelemetry .NET SDK.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"getting-started\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#getting-started\",\n    \"aria-label\": \"getting started permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Getting Started\"), mdx(\"p\", null, \"In order to instrument your .NET application for tracing, start by downloading the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry\"), \" nuget package to your application.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"dotnet add package OpenTelemetry\\n\")), mdx(\"p\", null, \"This is the OpenTelemetry SDK for .NET. The SDK deals with concerns such as sampling, processing pipeline, exporting telemetry to a particular backend etc.\\nThis generally requires additional packages to be downloaded for specific instrumentation or exporter.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"sending-traces-to-aws-x-ray\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#sending-traces-to-aws-x-ray\",\n    \"aria-label\": \"sending traces to aws x ray permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Sending Traces to AWS X-Ray\"), mdx(\"p\", null, \"By default, the OpenTelemetry SDK generates traces with W3C random ID which X-Ray backend doesn\\u2019t currently support.\\nYou need to install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry.Contrib.Extensions.AWSXRay\"), \" to be able to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AWSXRayIdGenerator\"), \" which generates X-Ray compatible trace IDs.\\nIf you plan to call another application instrumented with AWS X-Ray SDK, you\\u2019ll need to configure the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AWSXRayPropagator\"), \" as well.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"dotnet add package OpenTelemetry.Contrib.Extensions.AWSXRay\\n\")), mdx(\"p\", null, \"Configure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AWSXRayIdGenerator\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AWSXRayPropagator\"), \" globally in your application as follows. Make sure to call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AddXRayTraceId()\"), \" in the very \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"beginning\"), \" when creating \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProviderBuilder\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"using OpenTelemetry;\\nusing OpenTelemetry.Contrib.Extensions.AWSXRay.Trace;\\nusing OpenTelemetry.Trace;\\n\\nvar tracerProviderBuilder = Sdk.CreateTracerProviderBuilder().AddXRayTraceId() // for generating AWS X-Ray compliant trace IDs\\n\\nSdk.SetDefaultTextMapPropagator(new AWSXRayPropagator()); // configure AWS X-Ray propagator \\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": You\\u2019ll also need to have the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-collector\"\n  }), \"AWS Distro for OpenTelemetry Collector\"), \" running to export traces to X-Ray.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"instrumenting-net-applications\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#instrumenting-net-applications\",\n    \"aria-label\": \"instrumenting net applications permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Instrumenting .NET Applications\"), mdx(\"h3\", {\n    \"id\": \"aspnet-core\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#aspnet-core\",\n    \"aria-label\": \"aspnet core permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"ASP.NET Core\"), mdx(\"p\", null, \"Start by downloading the ASP.NET Core and OTLP exporter instrumentation\\npackages\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"dotnet add package OpenTelemetry.Instrumentation.AspNetCore\\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol\\n\")), mdx(\"p\", null, \"Next, in your application\\u2019s \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Startup.cs\"), \" file, add the instrumentation and the OTLP exporter to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProviderBuilder\"), \" and build.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"using OpenTelemetry;\\nusing OpenTelemetry.Contrib.Extensions.AWSXRay.Trace;\\nusing OpenTelemetry.Trace;\\n\\npublic void ConfigureServices(IServiceCollection services)\\n{\\n    services.AddControllers();\\n    tracerProviderBuilder\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter()\\n        .Build();          \\n}\\n\")), mdx(\"p\", null, \"By default the OTLP exporter sends data to an OpenTelemetry collector at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"localhost:4317\"), \".\"), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"aspnet\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#aspnet\",\n    \"aria-label\": \"aspnet permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"ASP.NET\"), mdx(\"p\", null, \"Download the ASP.NET and OTLP exporter instrumentation packages\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"dotnet add package OpenTelemetry.Instrumentation.AspNet\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol\\n\")), mdx(\"p\", null, \"The ASP.NET instrumentation requires \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-dotnet/blob/master/src/OpenTelemetry.Instrumentation.AspNet/README.md#step-2-modify-webconfig\"\n  }), \"modification\"), \"\\nto \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web.config\"), \" to add a module to your web server. When installing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry.Instrumentation.AspNet\"), \" nuget package, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TelemetryCorrelationHttpModule\"), \" should be automatically added.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<system.webServer>\\n    <modules>\\n    <add name=\\\"TelemetryCorrelationHttpModule\\\"\\n    type=\\\"Microsoft.AspNet.TelemetryCorrelation.TelemetryCorrelationHttpModule,\\n    Microsoft.AspNet.TelemetryCorrelation\\\"\\n    preCondition=\\\"integratedMode,managedHandler\\\" />\\n    </modules>\\n</system.webServer>\\n\")), mdx(\"p\", null, \"Now all you need to do is add the instrumentation and exporter to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProviderBuilder\"), \" and build. This is done in the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Global.asax.cs\"), \" as shown below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"using OpenTelemetry;\\nusing OpenTelemetry.Contrib.Extensions.AWSXRay.Trace;\\nusing OpenTelemetry.Trace;\\n\\npublic class WebApiApplication : HttpApplication\\n{\\n    protected void Application_Start()\\n    {\\n        tracerProvider\\n            .AddAspNetInstrumentation()\\n            .AddOtlpExporter()\\n            .Build();\\n    }\\n    \\n    protected void Application_End()\\n    {\\n        tracerProvider?.Dispose();\\n    }\\n}\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"aws-sdk-instrumentation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#aws-sdk-instrumentation\",\n    \"aria-label\": \"aws sdk instrumentation permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"AWS SDK Instrumentation\"), mdx(\"p\", null, \"For tracing downstream call to AWS services from your .NET application, you will need AWS client instrumentation. \"), mdx(\"p\", null, \"Download the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OpenTelemetry.Contrib.Instrumentation.AWS\"), \" package:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"dotnet add package OpenTelemetry.Contrib.Instrumentation.AWS\\n\")), mdx(\"p\", null, \"Add AWS client instrumentation to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracerProviderBuilder\"), \" and build. The below example is for an ASP.NET Core application.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-csharp\"\n  }), \"using OpenTelemetry;\\nusing OpenTelemetry.Contrib.Extensions.AWSXRay.Trace;\\nusing OpenTelemetry.Trace;\\n\\npublic void ConfigureServices(IServiceCollection services)\\n{\\n    services.AddControllers();\\n  \\n    tracerProviderBuilder\\n        .AddAWSInstrumentation() // for tracing calls to AWS services via AWS SDK for .NET\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter()\\n        .Build();\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Getting Started"},{"depth":2,"value":"Sending Traces to AWS X-Ray"},{"depth":2,"value":"Instrumenting .NET Applications"},{"depth":3,"value":"ASP.NET Core"},{"depth":3,"value":"ASP.NET"},{"depth":3,"value":"AWS SDK Instrumentation"}]}},"pageContext":{"slug":"/docs/getting-started/dotnet-sdk/trace-manual-instr/","githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/getting-started/dotnet-sdk/trace-manual-instr.mdx"}},"staticQueryHashes":["2501019404","973074209"]}