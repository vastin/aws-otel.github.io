{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/docs/getting-started/java-sdk/trace-auto-instr","result":{"data":{"mdx":{"id":"a5fe846d-b117-5b9f-932a-c53c91206d51","excerpt":"The Auto-Instrumentation Java Agent for OpenTelemetry can be attached to any Java 8+ application to gather telemetry data from a diverse\nset of libraries andâ€¦","fields":{"slug":"/docs/getting-started/java-sdk/trace-auto-instr/"},"frontmatter":{"title":"Tracing with AWS Auto Instrumentation Agent","description":"Learn how to get started with Java Auto-Instrumentation Agent... This package includes the instrumentation agent, instrumentations for all supported libraries and all available data exporters, providing a complete out of the box experience for tracing on AWS. The agent is preconfigured to generate trace IDs compatible with AWS X-Ray, which will also work with any other tracing system, and enables trace propagation using W3C Trace Context, B3, and X-Ray.","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tracing with AWS Auto Instrumentation Agent\",\n  \"description\": \"Learn how to get started with Java Auto-Instrumentation Agent... This package includes the instrumentation agent, instrumentations for all supported libraries and all available data exporters, providing a complete out of the box experience for tracing on AWS. The agent is preconfigured to generate trace IDs compatible with AWS X-Ray, which will also work with any other tracing system, and enables trace propagation using W3C Trace Context, B3, and X-Ray.\",\n  \"path\": \"/docs/getting-started/java-sdk/trace-auto-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The Auto-Instrumentation Java Agent for OpenTelemetry can be attached to any Java 8+ application to gather telemetry data from a diverse\\nset of libraries and frameworks. This data can also be exported to different backends in different formats. In addittion,\\nthe agent can be configured with environment variables or CLI parameters.\"), mdx(\"p\", null, \"In this tutorial, we will introduce how to use the java agent for automatic trace instrumentation.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Requirements\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://adoptopenjdk.net/\"\n  }), \"Java 8 (or later)\"), \" is required to run an application using OpenTelemetry.Getting the auto-instrumentation agent\"), mdx(\"p\", null, \"Download the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-java-instrumentation/releases/latest/download/aws-opentelemetry-agent.jar\"\n  }), \"latest version\"), \".\"), mdx(\"p\", null, \"If you'd prefer to pin to a specific version, check out our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-java-instrumentation/releases\"\n  }), \"releases\"), \".\"), mdx(\"p\", null, \"This package includes the instrumentation agent and instrumentation for all supported libraries and all available data exporters,\\nproviding a complete out-of-the-box experience for tracing. The agent is preconfigured to generate trace IDs compatible\\nwith \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws.amazon.com/xray/\"\n  }), \"AWS X-Ray\"), \", which works with any other tracing system, and enables trace propagation\\nusing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://w3c.github.io/trace-context/\"\n  }), \"W3C Trace Context\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/openzipkin/b3-propagation\"\n  }), \"B3\"), \",\\nand \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader\"\n  }), \"X-Ray\"), \".\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the AWS Distro for OpenTelemetry Collector running to export traces to X-Ray.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"running-the-agent-from-the-command-line\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#running-the-agent-from-the-command-line\",\n    \"aria-label\": \"running the agent from the command line permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Running the agent from the command line\"), mdx(\"p\", null, \"To run your app with the agent, specify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-javaagent\"), \" flag when starting up your application,\\npointing to the downloaded agent Java Archive (JAR) artifact. In addition, while not required by the agent itself,\\nalmost all tracing systems require a service name and service namespace defined to identify your application, which you can specify\\nwith the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_RESOURCE_ATTRIBUTES\"), \" environment variable and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"service.name\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"service.namespace\"), \" attribute keys.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"OTEL_RESOURCE_ATTRIBUTES=service.name=MyApp,service.namespace=MyTeam java -javaagent:path/to/aws-opentelemetry-agent.jar -jar myapp.jar\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Like normal system properties, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-javaagent\"), \" flag must come before -jar or your main class name.\"), mdx(\"p\", null, \"The above command will start up your app with the agent activated, and instrumentation is then activated\\nautomatically. For many cases, this is all you need to use tracing.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"running-the-agent-in-docker\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#running-the-agent-in-docker\",\n    \"aria-label\": \"running the agent in docker permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Running the agent in Docker\"), mdx(\"p\", null, \"If your app is packaged in Docker, the easiest way to run with the agent is to use the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JAVA_TOOL_OPTIONS\"), \" environment variable, which automatically sets flags for java. Adding this\\nsnippet to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dockerfile\"), \" will typically be enough to enable tracing, although if you already set\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JAVA_TOOL_OPTIONS\"), \", don't forget to make sure to add to your existing setting rather than replacing it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"ADD https://github.com/aws-observability/aws-otel-java-instrumentation/releases/latest/download/aws-opentelemetry-agent.jar /opt/aws-opentelemetry-agent.jar\\nENV JAVA_TOOL_OPTIONS=-javaagent:/opt/aws-opentelemetry-agent.jar\\n\")), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"advanced-configuration-of-the-auto-instrumentation-agent\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#advanced-configuration-of-the-auto-instrumentation-agent\",\n    \"aria-label\": \"advanced configuration of the auto instrumentation agent permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Advanced configuration of the auto-instrumentation agent\"), mdx(\"p\", null, \"By default OpenTelemetry Java agent uses the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/otlp\"\n  }), \"OTLP exporter\"), \"\\nand is configured to send data to a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector/blob/master/receiver/otlpreceiver/README.md\"\n  }), \"OpenTelemetry collector\"), \"\\nat \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:4317\"), \".\"), mdx(\"p\", null, \"The agent can be configured using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java-instrumentation#configuration-parameters-subject-to-change\"\n  }), \"standard OpenTelemetry options for configuration\"), \".\\nFor example, to set the random sampling rate for creating traces, you can set the environment variables\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER=parentbased_traceidratio\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTEL_TRACES_SAMPLER_ARG=0.3\"), \" to configure a sampling rate of 30%.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"instrumenting-within-your-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#instrumenting-within-your-application\",\n    \"aria-label\": \"instrumenting within your application permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Instrumenting within your application\"), mdx(\"p\", null, \"While the Java agent provides automatic instrumentation for popular frameworks, you might find the need\\nto perform instrumentation in your application, for example, to provide custom data or to instrument\\ncode within the application itself.\"), mdx(\"h3\", {\n    \"id\": \"adding-custom-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#adding-custom-attributes\",\n    \"aria-label\": \"adding custom attributes permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding custom attributes\"), mdx(\"p\", null, \"You can add custom attributes to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Span\"), \" by defining an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AttributeKey\"), \" and calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAttribute\"), \" on the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Span\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"@Controller\\npublic class AppController {\\n\\n  private static final AttributeKey<String> ORGANIZATION_ID = AttributeKeys.stringKey(\\\"organization.id\\\");\\n\\n  @GetMapping(\\\"/\\\")\\n  @ResponseBody\\n  public String handler() {\\n     String organizationId = findOrganizationIdForCurrentUser();\\n     Span.current().setAttribute(ORGANIZATION_ID, organizationId);\\n  }\\n}\\n\")), mdx(\"p\", null, \"In this example, the Java agent has already created a span corresponding to the Spring\\nhandler method. You use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Span.current()\"), \" to access that span and set the\\nattribute for a key that you have defined as a constant by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AttributeKeys\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" When using AWS X-Ray as your tracing backend, you can control whether attributes are uploaded as annotations\\nor metadata by configuring the AWS OTel Collector\\u2019s\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/master/exporter/awsxrayexporter#exporter-configuration\"\n  }), \"indexed keys\"), \".\\nBy default, all attributes will be metadata.\"), mdx(\"h3\", {\n    \"id\": \"creating-spans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#creating-spans\",\n    \"aria-label\": \"creating spans permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creating spans\"), mdx(\"p\", null, \"To add a span corresponding to a method in your application, we recommend using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@WithSpan\"), \" annotation.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"import io.opentelemetry.extension.annotations.WithSpan;\\n\\npublic class MyClass {\\n  @WithSpan\\n  public void MyLogic() {\\n      // Span created encapsulating the logic\\n  }\\n}\\n\")), mdx(\"p\", null, \"This automatically creates a span corresponding to the method with the same name as the method. You\\ncan use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Span.current()\"), \" inside the method to customize it, for example by adding attributes.\"), mdx(\"p\", null, \"You can also use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-java/blob/master/QUICKSTART.md#tracing\"\n  }), \"Tracer API\"), \"\\nif you need more functionality or want to trace only a block, rather than a method, of code.\"), mdx(\"h3\", {\n    \"id\": \"using-the-aws-sdk\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#using-the-aws-sdk\",\n    \"aria-label\": \"using the aws sdk permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Using the AWS SDK\"), mdx(\"p\", null, \"The Java agent includes instrumentation for the AWS SDK, which is enabled by default. This means you don\\u2019t need to\\ncomplete any additional steps for detailed tracing of the AWS SDK.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Requirements"},{"depth":2,"value":"Running the agent from the command line"},{"depth":2,"value":"Running the agent in Docker"},{"depth":2,"value":"Advanced configuration of the auto-instrumentation agent"},{"depth":2,"value":"Instrumenting within your application"},{"depth":3,"value":"Adding custom attributes"},{"depth":3,"value":"Creating spans"},{"depth":3,"value":"Using the AWS SDK"}]}},"pageContext":{"slug":"/docs/getting-started/java-sdk/trace-auto-instr/","githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/getting-started/java-sdk/trace-auto-instr.mdx"}},"staticQueryHashes":["2501019404","973074209"]}