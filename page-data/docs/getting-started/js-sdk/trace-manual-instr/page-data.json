{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/docs/getting-started/js-sdk/trace-manual-instr","result":{"data":{"mdx":{"id":"fa18e965-62bd-5346-943e-0483845ea6cd","excerpt":"Introduction In this Getting Started guide, we will introduce how to instrument a JavaScript application for traces to use with an AWS X-Ray backend. The AWSâ€¦","fields":{"slug":"/docs/getting-started/js-sdk/trace-manual-instr/"},"frontmatter":{"title":"Tracing with the AWS Distro for OpenTelemetry JavaScript SDK","description":"This project contains components of the OpenTelemetry Javascript SDK for OpenTelemetry, a framework to collect traces and metrics from applications. In order to trace data from various web applications, OpenTelemetry provides plugins to automatically trace data from web applications. As OpenTelemetry does not recognize AWS X-Ray as an officially supported backend, configurations have to be made in the NodeTracerProvider provided by the OpenTelemetry API.","image":null,"disableTableOfContents":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tracing with the AWS Distro for OpenTelemetry JavaScript SDK\",\n  \"description\": \"This project contains components of the OpenTelemetry Javascript SDK for OpenTelemetry, a framework to collect traces and metrics from applications. In order to trace data from various web applications, OpenTelemetry provides plugins to automatically trace data from web applications. As OpenTelemetry does not recognize AWS X-Ray as an officially supported backend, configurations have to be made in the NodeTracerProvider provided by the OpenTelemetry API.\",\n  \"path\": \"/docs/getting-started/js-sdk/trace-manual-instr\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Introduction\"), mdx(\"p\", null, \"In this Getting Started guide, we will introduce how to instrument a JavaScript application for traces to use with an AWS X-Ray backend.\"), mdx(\"p\", null, \"The AWS Distro for OpenTelemetry (ADOT) contains some components from the upstream OpenTelemetry Javascript SDK. This SDK collects traces\\nand metrics from applications. OpenTelemetry provides plugins to automatically trace data from multiple web applications. As OpenTelemetry\\nis not configured for AWS X-Ray by default, configuration has to be made in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NodeTracerProvider\"), \" provided by the OpenTelemetry API.\"), mdx(\"img\", {\n    src: img15,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"The diagram above shows the data path of exporting from an application instrumented with OpenTelemetry to AWS X-Ray. It starts with instrumenting\\nour app with a configured tracer, then we export traces to the Collector, and finally, the Collector will export to AWS X-Ray.\"), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"what-is-awsxrayidgenerator\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#what-is-awsxrayidgenerator\",\n    \"aria-label\": \"what is awsxrayidgenerator permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"What is AWSXRayIdGenerator?\"), mdx(\"p\", null, \"By default, OpenTelemetry uses the standard W3C trace format which generates a purely random trace ID. This differs from the traceID format that\\nAWS X-Ray uses where the first 4 bytes of the trace ID represents the start time of the trace. OpenTelemetry provides an extension point for us\\nto use the AWS X-Ray \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IdGenerator\"), \" to allow us to use a custom generator that conforms to the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html\"\n  }), \"X-Ray requirement\"), \". We\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-js/tree/master/packages/opentelemetry-id-generator-aws-xray\"\n  }), \"implemented an AWS XRay IdGenerator\"), \"\\nwhich generates traces with the first 8 hexadecimals set to the start time according to AWS X-Ray trace ID format.\"), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"what-is-awsxraypropagator\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#what-is-awsxraypropagator\",\n    \"aria-label\": \"what is awsxraypropagator permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"What is AWSXRayPropagator?\"), mdx(\"p\", null, \"By default, OpenTelemetry uses the W3C Trace Context format for propagating spans, and out-of-the-box supports B3 and Jaeger propagation.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HttpTextFormat\"), \" interface allows other propagators to be implemented, so we implemented an\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-js/tree/master/packages/opentelemetry-propagator-aws-xray\"\n  }), \"AWS Propagator\"), \"that conforms\\nwith the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader\"\n  }), \"X-Ray trace header format\"), \". \"), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"what-is-a-resource\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#what-is-a-resource\",\n    \"aria-label\": \"what is a resource permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"What is a Resource?\"), mdx(\"p\", null, \"A resource, defined by OpenTelemetry, is an immutable representation of the entity producing telemetry. For example, a process running in a\\ncontainer on Kubernetes may have a container name, container ID, and namespace. All of these attributes can be included in a resource object.\\nWhen a resource is defined and registered with the tracer provider, all spans produced by the Tracer will automatically include the resource attributes.\"), mdx(\"p\", null, \"More information about OpenTelemetry can be found in the OpenTelemetry \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/resource/sdk.md\"\n  }), \"specifications\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"requirements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#requirements\",\n    \"aria-label\": \"requirements permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Requirements\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/en/download/\"\n  }), \"Node JS v8.50 (or later)\"), \" is required to run an application using OpenTelemetry.\"), mdx(\"p\", null, \"Note: You\\u2019ll also need to have the ADOT Collector running to export traces to AWS X-Ray. See the ADOT Collector\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://aws-otel.github.io/docs/getting-started/collector\"\n  }), \"documentation\"), \" for setup instructions.\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"installing-the-sdk-and-dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#installing-the-sdk-and-dependencies\",\n    \"aria-label\": \"installing the sdk and dependencies permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Installing the SDK and Dependencies\"), mdx(\"p\", null, \"In order to trace your application, the following OpenTelemetry packages will be required to be installed in your applications main directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ npm install \\\\\\n  @opentelemetry/api \\\\\\n  @opentelemetry/node \\\\\\n  @opentelemetry/tracing \\\\\\n  @opentelemetry/exporter-collector-grpc\\n\")), mdx(\"p\", null, \"Install the AWS X-Ray components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ npm install \\\\\\n  @aws/otel-aws-xray-propagator \\\\\\n  @aws/otel-aws-xray-id-generator\\n\")), mdx(\"p\", null, \"To install a specific version, see the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aws-observability/aws-otel-js/releases\"\n  }), \"release tags on the Github releases page\"), \".\"), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"instrumenting-an-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#instrumenting-an-application\",\n    \"aria-label\": \"instrumenting an application permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Instrumenting an Application\"), mdx(\"p\", null, \"OpenTelemetry can collect tracing data from various applications automatically using plugins. The plugins offer instrumenting popular frameworks such as\\nHapi, Express, Redis, GraphQL, and many more. The full list of supported libraries and installation instructions can be found\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-js-contrib#node-plugins\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"OpenTelemetry allows the user to automatically collect telemetry data and export them to the backend of choice, to give observability with\\ndistributed systems. We will be going through how to instrument a simple HTTP server below.\"), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"configure-global-tracer-for-aws-x-ray\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#configure-global-tracer-for-aws-x-ray\",\n    \"aria-label\": \"configure global tracer for aws x ray permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Configure Global Tracer for AWS X-Ray\"), mdx(\"p\", null, \"The following tracer configuration file for AWS X-Ray is uniform for all applications and the following code can be copied into a file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tracer.js\"), \":\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Any additional configurations will be modified in here.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"const { SimpleSpanProcessor } = require(\\\"@opentelemetry/tracing\\\");\\nconst { NodeTracerProvider } = require('@opentelemetry/node');\\nconst { CollectorTraceExporter } = require('@opentelemetry/exporter-collector-grpc');\\nconst { AWSXRayPropagator } = require('AWSXRayPropagator');\\nconst { AwsXRayIdGenerator } = require('AWSXRayIdGenerator');\\nconst { propagation, trace } = require(\\\"@opentelemetry/api\\\");\\n\\nmodule.exports = (serviceName) => {\\n  // set global propagator\\n  propagation.setGlobalPropagator(new AWSXRayPropagator());\\n\\n  // create a provider for activating and tracking with AWS IdGenerator\\n  const tracerConfig = {\\n    idGenerator: new AwsXRayIdGenerator(),\\n  // Any instrumentation plugins will be declared here\\n    plugins: {},\\n  // Any resources can be declared here\\n    resources: {},\\n  };\\n  const tracerProvider = new NodeTracerProvider(tracerConfig);\\n\\n  // add OTLP exporter\\n  const otlpExporter = new CollectorTraceExporter({\\n    serviceName: serviceName,\\n    // port configured in the Collector config, defaults to 55680\\n    url: \\\"localhost:55680\\\"\\n    // credentials only required if tls setup on Collector instance\\n    credentials: grpc.credentials.createSsl(\\n      fs.readFileSync('./ca.crt'),\\n      fs.readFileSync('./client.key'),\\n      fs.readFileSync('./client.crt')\\n    )\\n  });\\n  tracerProvider.addSpanProcessor(new SimpleSpanProcessor(otlpExporter));\\n\\n  // Register the tracer\\n  tracerProvider.register();\\n\\n  // Return an tracer instance\\n  return trace.getTracer(\\\"sample-instrumentation\\\");\\n}\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"sample-application\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#sample-application\",\n    \"aria-label\": \"sample application permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Sample Application\"), mdx(\"p\", null, \"For this guide, we will be tracing a sample hello-world application and this code can be copied into a file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"'use strict';\\nconst tracer = require('./tracer')('');\\nconst http = require('http');\\n\\n/** Starts a HTTP server that receives requests on localhost:8080. */\\nfunction startServer(address) {\\n  // Creates a server\\n  const server = http.createServer(handleRequest);\\n  // Starts the server\\n  server.listen(address, (err) => {\\n    if (err) {\\n      throw err;\\n    }\\n    console.log(`Node HTTP listening on ${address}`);\\n  });\\n}\\n\\nfunction handleRequest(req, res) {  \\n   try {\\n    req.on('error', (err) => console.log(err));\\n    req.on('data', (chunk) => body.push(chunk));\\n    req.on('end', () => {\\n        res.end('Hello World!');\\n      });\\n  } catch (err) {\\n    console.error(err);\\n  }\\n}\\n\\nstartServer(8080);\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"start-tracing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#start-tracing\",\n    \"aria-label\": \"start tracing permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Start Tracing\"), mdx(\"p\", null, \"All that has to be done now is to declare the tracer at the top of your application file, i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const tracer = require('./tracer')('your app name');\\n\")), mdx(\"p\", null, \"Start application via terminal:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"node server.js\\n\")), mdx(\"p\", null, \"Whenever a request is made to the application, the tracer will automatically collect telemetry data from the application, export to\\nthe collector, and the Collector will send traces AWS X-Ray.\"), mdx(\"p\", null, \"Visit the sample application via url localhost:8080:\"), mdx(\"img\", {\n    src: jsImg1,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"If the Collector has been set up successfully with the proper endpoints, AWS credentials and the application is instrumented correctly,\\nwe should see the following in the AWS X-Ray console:\"), mdx(\"img\", {\n    src: jsImg2,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(\"p\", null, \"This trace can be analyzed by clicking into it:\"), mdx(\"img\", {\n    src: jsImg3,\n    alt: \"Diagram\",\n    style: {\n      \"margin\": \"30px 0\"\n    }\n  }), mdx(SectionSeparator, {\n    mdxType: \"SectionSeparator\"\n  }), mdx(\"h2\", {\n    \"id\": \"additional-configurations\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#additional-configurations\",\n    \"aria-label\": \"additional configurations permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Additional Configurations\"), mdx(\"p\", null, \"As shown in the example, it is very easy to start instrumenting a simple HTTP application. This section includes the usage of plugins to instrument different\\nlibraries, adding resources to populate traces with information about the entity, adding custom attributes, and manually creating spans.\"), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"adding-resources\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#adding-resources\",\n    \"aria-label\": \"adding resources permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding Resources\"), mdx(\"p\", null, \"Adding resources to the traces will provide more information and insight about the application. In particular, there are multiple resource detectors\\nwhich add information about the environment in the traces. This includes the Amazon Elastic Kubernetes service, Elastic Container Service, Elastic\\nCompute Cloud, and AWS Beanstalk. If your application is deployed on any of the named services, you may want to include these resource detectors to include\\nadditional information about the environment themselves; this may include containerID, container name, version and deployment ID.\"), mdx(\"p\", null, \"Install the following dependency with npm:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"npm install --save @opentelemetry/resource-detector-aws \\\\\\n                   @opentelemetry/resources\\n\")), mdx(\"p\", null, \"Import the dependencies in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tracer.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const { awsEc2Detector, awsEksDetector, awsEcsDetector, awsBeanstalkDetector } = require('@opentelemetry/resource-detector-aws');\\nconst { detectResources } = require('@opentelemetry/resources/build/src/platform/node/detect-resources');\\n\")), mdx(\"p\", null, \"Detect the resources using the code snippet:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"var resources;\\n  detectResources({ detectors: [awsEc2Detector, awsEksDetector, awsEcsDetector, awsBeanstalkDetector] })\\n  .then((res) => {\\n    resources = res;\\n    console.log(\\\"detected resource: \\\" + JSON.stringify(resources));\\n  }).catch((e) => {console.log(e);});\\n\")), mdx(\"p\", null, \"Include the plugin in the provided \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tracer.js\"), \" template:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"resources: resources,\\n\")), mdx(\"p\", null, \"The tracer will automatically include any resource information into its traces once an application is instrumented. Only include the specific\\nresource detector if your application is hosted on the corresponding Amazon service to reduce overhead. However, the detectors will not throw an\\nerror or include unexpected information if it is declared and the application is not running in the corresponding environment.\"), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"instrumenting-different-frameworks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#instrumenting-different-frameworks\",\n    \"aria-label\": \"instrumenting different frameworks permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Instrumenting Different Frameworks\"), mdx(\"p\", null, \"The full list of supported plugins and installation instructions can be found\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-js-contrib#node-plugins\"\n  }), \"here\"), \". For example, to start instrumenting an express:\"), mdx(\"p\", null, \"Install the following dependency with npm:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"npm install --save @opentelemetry/plugin-express\\n\")), mdx(\"p\", null, \"Include the plugin in the provided tracer.js template:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"  // Any instrumentation plugins will be declared here\\n    plugins: {\\n      express: {\\n      enabled: true,\\n      // You may use a package name or absolute path to the file.\\n      path: '@opentelemetry/plugin-express',\\n    }\\n  }\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"tracing-aws-sdk-calls\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#tracing-aws-sdk-calls\",\n    \"aria-label\": \"tracing aws sdk calls permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Tracing AWS SDK Calls\"), mdx(\"p\", null, \"Tracing support to any AWS SDK calls such as Amazon DynamoDB, S3, and etc is provided by the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aspecto-io/opentelemetry-ext-js/tree/master/packages/plugin-aws-sdk\"\n  }), \"Open Telemetry AWS SDK Instumentation plugin\"), \" by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.aspecto.io/\"\n  }), \"aspecto.io\"), \".\"), mdx(\"p\", null, \"Install the following dependency with npm:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"npm install --save opentelemetry-plugin-aws-sdk\\n\")), mdx(\"p\", null, \"Include the plugin in the provided tracer.js template:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"  plugins: {\\n    \\\"aws-sdk\\\": {\\n      enabled: true,\\n      // You may use a package name or absolute path to the file.\\n      path: \\\"opentelemetry-plugin-aws-sdk\\\",\\n    },\\n\")), mdx(SubSectionSeparator, {\n    mdxType: \"SubSectionSeparator\"\n  }), mdx(\"h3\", {\n    \"id\": \"adding-custom-attributes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#adding-custom-attributes\",\n    \"aria-label\": \"adding custom attributes permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Adding Custom Attributes\"), mdx(\"p\", null, \"You can add custom attributes to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Span\"), \" by defining an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AttributeKey\"), \" and calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAttribute\"), \"\\non the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Span\"), \". The JavaScript SDK creates spans via it\\u2019s supported web framework plugins. You can use\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TracingContextUtils.getCurrentSpan()\"), \" to access the current span and set the attribute for a key that you have defined as a constant by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AttributeKeys\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"const { context, propagation, trace } = require(\\\"@opentelemetry/api\\\");\\n\\nconst tracer = require('./xray-tracer')('your app name');\\n\\n//...\\n\\nfunction SetSpanAttribute() {\\n  const span = tracer.getCurrentSpan()\\n  String exampleAttribute = exampleAttribute();\\n  TracingContextUtils.getCurrentSpan().setAttribute(EXAMPLE_ATTRIBUTE, exampleAttribute);\\n}\\n\")), mdx(\"p\", null, \"*Note: When using AWS X-Ray as your tracing backend, you can control whether attributes are uploaded as annotations or metadata by configuring the ADOT\\nCollector\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/master/exporter/awsxrayexporter#exporter-configuration\"\n  }), \"indexed keys\"), \".\\nAdditionally, you can set attributes as annotations by enabling it in the collector configuration for X-Ray exporter.\\nSee the instructions \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/docs/getting-started/x-ray/#enable-the-customized-x-ray-annotations\"\n  }), \"here\"), \".\"), mdx(\"h4\", {\n    \"id\": \"creating-spans\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#creating-spans\",\n    \"aria-label\": \"creating spans permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Creating Spans\"), mdx(\"p\", null, \"Spans can be manually created using the standard OpenTelemetry API. This will be modified in the application code to do any manual span instrumentation,\\nyou may desire to inquire more information about a certain request, etc.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"lineNumbers=true\",\n    \"lineNumbers\": \"true\"\n  }), \"const span = tracer.startSpan('op');\\n//...\\nspan.end();\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Introduction"},{"depth":3,"value":"What is AWSXRayIdGenerator?"},{"depth":3,"value":"What is AWSXRayPropagator?"},{"depth":3,"value":"What is a Resource?"},{"depth":2,"value":"Requirements"},{"depth":2,"value":"Installing the SDK and Dependencies"},{"depth":2,"value":"Instrumenting an Application"},{"depth":3,"value":"Configure Global Tracer for AWS X-Ray"},{"depth":3,"value":"Sample Application"},{"depth":3,"value":"Start Tracing"},{"depth":2,"value":"Additional Configurations"},{"depth":3,"value":"Adding Resources"},{"depth":3,"value":"Instrumenting Different Frameworks"},{"depth":3,"value":"Tracing AWS SDK Calls"},{"depth":3,"value":"Adding Custom Attributes"},{"depth":4,"value":"Creating Spans"}]}},"pageContext":{"slug":"/docs/getting-started/js-sdk/trace-manual-instr/","githubEditUrl":"https://github.com/rocketseat/gatsby-themes/tree/master/examples/gatsby-theme-docs/src/docs/getting-started/js-sdk/trace-manual-instr.mdx"}},"staticQueryHashes":["2501019404","973074209"]}